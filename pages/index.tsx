import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.scss'
import Link from 'next/link'
import Image from 'next/image';
import {useDispatch, useSelector} from "react-redux";
import { selectUser } from './../src/store';
import costumAxios from "../utils/axios";
import useSWR from "swr";
import { SpinnerDotted } from 'spinners-react';
import useLayoutEffect from "../utils/IsOrmorphicLayoutEffect";
import Router from 'next/router'
import { login, logout } from '../src/features/userSlice';


const fetcher = async() => {
  const res =  await costumAxios.get("/");
  return res.data
}


interface HomeProps{
  VideoPrevData:[VideoPrevData]
}


export const myLoader=({src}:any)=>{
  return `${process.env.NEXT_PUBLIC_REMOTE}/watch/thumb/${src}`;
}

/* 
 displays every video thumb which is got back from API
 @file: VideoPrewData 
        is an object von type VideoPrewData 
*/
export const displayImage = (file:VideoPrevData) =>{
  let date = new Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }).format(+file.date)
   return <div key={file.id}  id={file.id}>
             <Link href={`watch/${file.id}`}>
               <a href="#">
                 <Image loader={myLoader} height={200} width={200}
                      src={`${file.id}`} alt={file.id}
                  />
               </a>
             </Link>
             <span>{file.title}</span>
               <span>{date}</span>
               <span>{file.duration.minute}:{file.duration.second}</span>
           </div>
}

/*
 calling the api and getting videos back
*/
export const getVideos = () =>{
  const {data , error} = useSWR('/' , fetcher)
  return {
    videos:data,
    isLoading: !error && !data,
    isError:error
  }
}

const Home: NextPage<HomeProps> = () => {
  const dispatch = useDispatch();
  
  const user = useSelector(selectUser).user
  const message = useSelector(selectUser).errorMSG;

  const {videos,isLoading,isError} = getVideos();

  useLayoutEffect(() =>{
      if(message.includes("Invalid refresh")){
        Router.push("/login")
        dispatch(logout())
        }
      })
  
  return (
    <div className={styles.container}>
      <Head>
        <title>watchit</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="minimal-ui, width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"/>
        <meta name="apple-mobile-web-app-capable" content="yes"/>
        <meta name="mobile-web-app-capable" content="yes"/>
        <meta name="viewport" content="width=device-width" />
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>


        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.main}>

            {
              isLoading ? <SpinnerDotted/> :
              videos &&  videos.map((d:VideoPrewData) => {
                return displayImage(d);
              }) 
            }
             
            
      </div>

      <footer className={styles.footer}>
        
      </footer>
    </div>
  )
}




export default Home
